Rest: Representational State transfer

If a browser requests and server sends some html pages that is a traditional webpage

When a mobile app(Client) stores and fetch the data but doesn't use/render html and if a Client(Code)
then also we don't need the html pages(Using third party features)
Only one page web application then also we'll go with Restful APIs
Restful APIs are stateless backends


                               Restful Server
            /users              /posts                        /products
    Get Post Delete          Get Post Patch                  Get

                               
                               Ajax request(Current page is still running) and get the response
                               
                               Client

    Restful Constraints
    1- Client-Server Architecture: Separation concerns Restful API should not care about the UI
    2- stateless: No-Client context( eg. Session) is stored on the server
    3- Cacheability: Response must define themselves as cacheable or non-cacheable
    4- Layered System: Intermediate server maybe used without the Client knowing about it
    5- Uniform Interface: Resources are identified in request, transfered data is decoupled from db schema
            Self-descriptive message links to further resources.
    6- Code on demand(optional): Executable code should be transfered.



    if a user doesn't want to restart the server again and again then he can use the dependency known as 
    nodemon and to install it we pass the command on cmd
       npm install --save-dev nodemon


    for the log we use morgan
    npm install --save morgan


    It has one branch to understand the concept of merging branches on gitHub.


    create branch:  git branches branch_name
    Checkout branch: git checkout branch_name
    commit the changes to the new branch and push it to the gitHub reop, now you can see the new branch over gitHub.
    now merge new branch to master branch: first checkout to master branch then 
    use command: git merge branch_name
    now you can see the chnages to local master reop but to see the changes to remote, you have to push the master branch.
    
    to delete branch:
    from local: git branch -d branch_name
    from remote: git push origin --delete branch_name


    for parsing the body and handling cors in restful APIs
    first install the parse: npm install --save body-parser
    body-parser does not support file parsing but it does support URL and json parsing.



    CORS: Cross-Origin-Resource-Sharing

    Cors-error: 
    traditionally we Client and server have the same localhost like(3000), then they will successed.
    but if they have different localhost origins and even the port numbers of on localhost are consedered different.
    in this case trying to request on the server for resources will fail then in that case e can actually 
    disable this when sending some headers from the server to the client that finally tells the browser that running
    the client application, which allows client to have the access.
    we should add the headers before we reach to our routes in app.js file


    for database use mongoose
    npm install --save mongoose